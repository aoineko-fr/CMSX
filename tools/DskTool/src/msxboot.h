const unsigned char msxboot720[] = { 
	0xeb,0xfe,0x90,								// 0x000	[3]		Dummy jump instruction (e.g., 0xEB 0xFE 0x90)
	0x44,0x53,0x4b,0x54,0x4f,0x4f,0x4c,0x20,	// 0x003	[8]		OEM Name (padded with spaces 0x20): "DSKTOOL "
												// 0x00B	[19]	DOS 3.0 BPB
	0x00,0x02,									//   0x00B	[2]			Bytes per logical sector in powers of two: 512 (0x0200)
	0x02,										//   0x00D	[1]			Logical sectors per cluster: 2 (0x02)
	0x01,0x00,									//   0x00E	[2]			Count of reserved logical sectors: 1 (0x0001)
	0x02,										//   0x010	[1]			Number of File Allocation Tables: 2 (0x02)
	0x70,0x00,									//   0x011	[2]			Maximum number of FAT12 or FAT16 root directory entries: 112 (0x0070)
	0xa0,0x05,									//   0x013	[2]			Total logical sectors: 1440 (0x05a0)
	0xf9,										//   0x015	[1]			Media descriptor: F9h:3.5"720Kb | F8h:3.5"360Kb
	0x03,0x00,									//   0x016	[2]			Logical sectors per File Allocation Table (FAT): 3 (0x0003)
	0x09,0x00,									//   0x018	[2]			Physical sectors per track for disks with CHS geometry: 9 (0x0009)
	0x02,0x00,									//   0x01A	[2]			Number of heads: 2 (0x0002)
	0x00,0x00,									//   0x01C	[2]			Count of hidden sectors preceding the partition that contains this FAT volume: 0 (0x0000)
	0xd0,0xed,									// 0x01E	[2]		MSX-DOS 1 code entry point for Z80 processors into MSX boot code. This is where MSX-DOS 1 machines jump to when passing control to the boot sector.
	0x53,0x59,0xc0,0x32,0xc4,0xc0,				// 0x020	[6]		MSX-DOS 2 volume signature "VOL_ID"
	0x36,										// 0x026	[1]		MSX-DOS 2 undelete flag (default: 0x00)
	0x56,0x23,0x36,0xc0,						// 0x027	[4]		MSX-DOS 2 disk serial number (default: 0x00000000)
												// 0x02B	[...]	MSX-DOS 2 code entry point for Z80 processors into MSX boot code
	0x31,0x1f,0xf5,				// $c02b: ld   sp,$f61f		; Set Stack Pile
	0x11,0x79,0xc0,				// $c02e: ld   de,$c079		; FCB for MSXDOS.SYS load
	0x0e,0x0f,					// $c031: ld   c,$0f		; DOS Call: OPEN FILE [FCB]
	0xcd,0x7d,0xf3,				// $c033: call $f37d
	0x3c,						// $c036: inc  a			; if error show error message
	0xca,0x63,0xc0,				// $c037: jp   z,$c063		
	0x11,0x00,0x01,				// $c03a: ld   de,$0100		; Address to load MSXDOS.SYS
	0x0e,0x1a,					// $c03d: ld   c,$1a		; DOS Call: SET DISK TRANSFER ADDRESS
	0xcd,0x7d,0xf3,				// $c03f: call $f37d
	0x21,0x01,0x00,				// $c042: ld   hl,$0001		; Set FCB Record Size to 1 byte
	0x22,0x87,0xc0,				// $c045: ld   ($c087),hl
	0x21,0x00, 0x3f,			// $c048: ld   hl,$3f00		; Record to read
	0x11,0x79,0xc0,				// $c04b: ld   de,$c079		; Pointer to FCB
	0x0e,0x27,					// $c04e: ld   c,$27		; DOS Call: RANDOM BLOCK READ [FCB]
	0xcd,0x7d,0xf3,				// $c050: call $f37d
	0xc3,0x00,0x01,				// $c053: jp   $0100		; Execute MSXDOS.SYS
	0x58,						// $c056: ld   e,b			; ??
	0xc0,						// $c057: ret  nz			; ??
	0xcd,0x00,0x00,				// $c058: call $0000		; ??
	0x79,						// $c05b: ld   a,c			; ??
	0xe6,0xfe,					// $c05c: and  $fe			; ??
	0xfe,0x02,					// $c05e: cp   $02			; ??
	0xc2,0x6a,0xc0,				// $c060: jp   nz,$c06a		; ??
	0x3a,0xc4,0xc0,				// $c063: ld   a,($c0c4)	; Check address $c0c4
	0xa7,						// $c066: and  a
	0xca,0x22,0x40,				// $c067: jp   z,$4022		; Jump to BASIC
	0x11,0x9e,0xc0,				// $c06a: ld   de,$c09e		; Show message "Boot error Press any key for retry"
	0x0e,0x09,					// $c06d: ld   c,$09		; DOS Call: STRING OUTPUT
	0xcd,0x7d,0xf3,				// $c06f: call $f37d
	0x0e,0x07,					// $c072: ld   c,$07		; DOS Call: DIRECT CONSOLE INPUT
	0xcd,0x7d,0xf3,				// $c074: call $f37d
	0x18,0xb2,					// $c077: jr   $c02b		; Try load MSXDOS.SYS again

	0x00,0x4d,0x53,0x58,0x44,0x4f,0x53,0x20, 0x20,0x53,0x59,0x53,0x00,0x00,0x00,0x00,	// FCB for "MSXDOS  SYS" (37 bytes)
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,
	0x42,0x6f,0x6f,0x74,0x20,0x65,0x72,0x72, 0x6f,0x72,0x0d,0x0a,0x50,0x72,0x65,0x73,	//"Boot error\r\nPress any key for retry\r\n$" (38 bytes)
	0x73,0x20,0x61,0x6e,0x79,0x20,0x6b,0x65, 0x79,0x20,0x66,0x6f,0x72,0x20,0x72,0x65,
	0x74,0x72,0x79,0x0d,0x0a,0x24,
								// $c0c4:
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00
												// 0x1FE	[2]		Signature
};
